#light
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace FibGraph
    #nowarn "49" // uppercase argument names
    #nowarn "67" // this type test or downcast will always hold
    #nowarn "66" // this upcast is unnecessary - the types are identical
    #nowarn "58" // possible incorrect indentation..
    #nowarn "57" // do not use create_DelegateEvent
    #nowarn "51" // address-of operator can occur in the code
    
    exception ReturnExceptionc4900d461bc84dbbb398b69b532ed6da of obj
    exception ReturnNoneExceptionc4900d461bc84dbbb398b69b532ed6da
    
    type
        Ifib = interface
            
            abstract Compute : int * CnCRuntime.ITagCollection<int> * CnCRuntime.ITagCollection<int> -> CnCRuntime.CnCReturn
        end
    
    and
        IfibSum = interface
            
            abstract Compute : int * CnCRuntime.IItemCollection<int, int> -> CnCRuntime.CnCReturn
        end
    
    and
        IFibGraph = interface
            inherit CnCRuntime.Graph
            abstract fibs : CnCRuntime.IItemCollection<int, int> with get
            
            abstract fib : CnCRuntime.ITagCollection<int> with get
            
            abstract fibSum : CnCRuntime.ITagCollection<int> with get
            
        end
    
    and
        
        fib = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_fib:Ifib
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_graph:IFibGraph
            new(graph:IFibGraph, fib:Ifib) as this =
                {
                } then
                    this.m_graph <- graph
                    this.m_fib <- fib
            abstract Put : int -> unit
            default this.Put  (tag:int) =
                let mutable tag = tag
                System.Diagnostics.Debug.WriteLineIf(CnCRuntime.Trace.Enabled, System.String.Format("PT: fib PutTag {0}", tag)) |> ignore
                let tag = tag
                CnCRuntime.PutTag(this.m_graph, 
                                                                                                                    System.Func<unit,CnCRuntime.CnCReturn>(fun _ -> this.m_fib.Compute(tag, this.m_graph.fib, this.m_graph.fibSum))) |> ignore
            interface CnCRuntime.ITagCollection<int> with
                member this.Put  (tag:int) =
                    let mutable tag = tag
                    System.Diagnostics.Debug.WriteLineIf(CnCRuntime.Trace.Enabled, System.String.Format("PT: fib PutTag {0}", tag)) |> ignore
                    let tag = tag
                    CnCRuntime.PutTag(this.m_graph, 
                                                                                                                        System.Func<unit,CnCRuntime.CnCReturn>(fun _ -> this.m_fib.Compute(tag, this.m_graph.fib, this.m_graph.fibSum))) |> ignore
            end
        end
    
    and
        
        fibSum = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_fibSum:IfibSum
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_graph:IFibGraph
            new(graph:IFibGraph, fibSum:IfibSum) as this =
                {
                } then
                    this.m_graph <- graph
                    this.m_fibSum <- fibSum
            abstract Put : int -> unit
            default this.Put  (tag:int) =
                let mutable tag = tag
                System.Diagnostics.Debug.WriteLineIf(CnCRuntime.Trace.Enabled, System.String.Format("PT: fibSum PutTag {0}", tag)) |> ignore
                let tag = tag
                CnCRuntime.PutTag(this.m_graph, 
                                                                                                                    System.Func<unit,CnCRuntime.CnCReturn>(fun _ -> this.m_fibSum.Compute(tag, this.m_graph.fibs))) |> ignore
            interface CnCRuntime.ITagCollection<int> with
                member this.Put  (tag:int) =
                    let mutable tag = tag
                    System.Diagnostics.Debug.WriteLineIf(CnCRuntime.Trace.Enabled, System.String.Format("PT: fibSum PutTag {0}", tag)) |> ignore
                    let tag = tag
                    CnCRuntime.PutTag(this.m_graph, 
                                                                                                                        System.Func<unit,CnCRuntime.CnCReturn>(fun _ -> this.m_fibSum.Compute(tag, this.m_graph.fibs))) |> ignore
            end
        end
    
    and
        
        FibGraph = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_ic:System.Threading.CountdownEvent
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_itemC_fibs:CnCRuntime.IItemCollection<int, int>
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_tagC_fib:CnCRuntime.ITagCollection<int>
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_tagC_fibSum:CnCRuntime.ITagCollection<int>
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_stepC_fib:Ifib
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable m_stepC_fibSum:IfibSum
            new() as this =
                {
                }
            interface IFibGraph with
            
                member self.fibs with get() = self.m_itemC_fibs
                
                member self.fib with get() = self.m_tagC_fib
                
                member self.fibSum with get() = self.m_tagC_fibSum
                
                member self.outstandingTasks with get() = self.m_ic
            
            end
            static member Create  (fib:Ifib, fibSum:IfibSum) =
                let mutable fib = fib
                let mutable fibSum = fibSum
                let mutable (g:FibGraph) = new FibGraph()
                g.m_stepC_fib <- fib
                g.m_stepC_fibSum <- fibSum
                g.m_itemC_fibs <- new CnCRuntime.ItemCollection<int, int>("fibs")
                g.m_tagC_fib <- new fib(g, fib)
                g.m_tagC_fibSum <- new fibSum(g, fibSum)
                g.m_ic <- new System.Threading.CountdownEvent(1)
                ((g :> obj) :?> IFibGraph)
        end