// Signature file for parser generated by fsyacc
#light
type token = 
  | L_ARROW
  | R_ARROW
  | L_PAREN
  | R_PAREN
  | L_ANGLE
  | R_ANGLE
  | L_BRACKET
  | R_BRACKET
  | SEMI
  | COLON_COLON
  | COLON
  | COMMA
  | EOF
  | ENV
  | TYPE of (string)
  | NAME of (string)
type tokenId = 
    | TOKEN_L_ARROW
    | TOKEN_R_ARROW
    | TOKEN_L_PAREN
    | TOKEN_R_PAREN
    | TOKEN_L_ANGLE
    | TOKEN_R_ANGLE
    | TOKEN_L_BRACKET
    | TOKEN_R_BRACKET
    | TOKEN_SEMI
    | TOKEN_COLON_COLON
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_ENV
    | TOKEN_TYPE
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_statements
    | NONTERM_terminated_declaration
    | NONTERM_declaration
    | NONTERM_terminated_relation
    | NONTERM_relation
    | NONTERM_step_execution
    | NONTERM_step_prescription
    | NONTERM_item_instance_list
    | NONTERM_output_instance_list
    | NONTERM_tag_instance
    | NONTERM_tag_description
    | NONTERM_tag_component_list
    | NONTERM_tag_component
    | NONTERM_param_list
    | NONTERM_param
    | NONTERM_item_instance
    | NONTERM_item_definition
    | NONTERM_step_instance_list
    | NONTERM_step_instance
    | NONTERM_item_declaration
    | NONTERM_tag_declaration
    | NONTERM_step_declaration
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (CnCAst.Graph) 
