// Implementation file for parser generated by fsyacc
#light
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open CnCAst


let defaultTagType = "int"
let defaultTagDescription = [BaseTypeComponent {ComponentType = defaultTagType; ComponentName = "_default"}]

# 14 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | L_ARROW
  | R_ARROW
  | L_PAREN
  | R_PAREN
  | L_ANGLE
  | R_ANGLE
  | L_BRACKET
  | R_BRACKET
  | SEMI
  | COLON_COLON
  | COLON
  | COMMA
  | EOF
  | ENV
  | TYPE of (string)
  | NAME of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_L_ARROW
    | TOKEN_R_ARROW
    | TOKEN_L_PAREN
    | TOKEN_R_PAREN
    | TOKEN_L_ANGLE
    | TOKEN_R_ANGLE
    | TOKEN_L_BRACKET
    | TOKEN_R_BRACKET
    | TOKEN_SEMI
    | TOKEN_COLON_COLON
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_ENV
    | TOKEN_TYPE
    | TOKEN_NAME
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_statements
    | NONTERM_terminated_declaration
    | NONTERM_declaration
    | NONTERM_terminated_relation
    | NONTERM_relation
    | NONTERM_step_execution
    | NONTERM_step_prescription
    | NONTERM_item_instance_list
    | NONTERM_output_instance_list
    | NONTERM_tag_instance
    | NONTERM_tag_description
    | NONTERM_tag_component_list
    | NONTERM_tag_component
    | NONTERM_param_list
    | NONTERM_param
    | NONTERM_item_instance
    | NONTERM_item_definition
    | NONTERM_step_instance_list
    | NONTERM_step_instance
    | NONTERM_item_declaration
    | NONTERM_tag_declaration
    | NONTERM_step_declaration

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | L_ARROW  -> 0 
  | R_ARROW  -> 1 
  | L_PAREN  -> 2 
  | R_PAREN  -> 3 
  | L_ANGLE  -> 4 
  | R_ANGLE  -> 5 
  | L_BRACKET  -> 6 
  | R_BRACKET  -> 7 
  | SEMI  -> 8 
  | COLON_COLON  -> 9 
  | COLON  -> 10 
  | COMMA  -> 11 
  | EOF  -> 12 
  | ENV  -> 13 
  | TYPE _ -> 14 
  | NAME _ -> 15 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_L_ARROW 
  | 1 -> TOKEN_R_ARROW 
  | 2 -> TOKEN_L_PAREN 
  | 3 -> TOKEN_R_PAREN 
  | 4 -> TOKEN_L_ANGLE 
  | 5 -> TOKEN_R_ANGLE 
  | 6 -> TOKEN_L_BRACKET 
  | 7 -> TOKEN_R_BRACKET 
  | 8 -> TOKEN_SEMI 
  | 9 -> TOKEN_COLON_COLON 
  | 10 -> TOKEN_COLON 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_EOF 
  | 13 -> TOKEN_ENV 
  | 14 -> TOKEN_TYPE 
  | 15 -> TOKEN_NAME 
  | 18 -> TOKEN_end_of_input
  | 16 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_statements 
    | 3 -> NONTERM_statements 
    | 4 -> NONTERM_statements 
    | 5 -> NONTERM_statements 
    | 6 -> NONTERM_terminated_declaration 
    | 7 -> NONTERM_declaration 
    | 8 -> NONTERM_declaration 
    | 9 -> NONTERM_declaration 
    | 10 -> NONTERM_terminated_relation 
    | 11 -> NONTERM_relation 
    | 12 -> NONTERM_relation 
    | 13 -> NONTERM_step_execution 
    | 14 -> NONTERM_step_execution 
    | 15 -> NONTERM_step_execution 
    | 16 -> NONTERM_step_prescription 
    | 17 -> NONTERM_step_prescription 
    | 18 -> NONTERM_item_instance_list 
    | 19 -> NONTERM_item_instance_list 
    | 20 -> NONTERM_output_instance_list 
    | 21 -> NONTERM_output_instance_list 
    | 22 -> NONTERM_output_instance_list 
    | 23 -> NONTERM_output_instance_list 
    | 24 -> NONTERM_tag_instance 
    | 25 -> NONTERM_tag_instance 
    | 26 -> NONTERM_tag_description 
    | 27 -> NONTERM_tag_component_list 
    | 28 -> NONTERM_tag_component_list 
    | 29 -> NONTERM_tag_component 
    | 30 -> NONTERM_tag_component 
    | 31 -> NONTERM_tag_component 
    | 32 -> NONTERM_tag_component 
    | 33 -> NONTERM_param_list 
    | 34 -> NONTERM_param_list 
    | 35 -> NONTERM_param 
    | 36 -> NONTERM_item_instance 
    | 37 -> NONTERM_item_instance 
    | 38 -> NONTERM_item_definition 
    | 39 -> NONTERM_item_definition 
    | 40 -> NONTERM_item_definition 
    | 41 -> NONTERM_step_instance_list 
    | 42 -> NONTERM_step_instance_list 
    | 43 -> NONTERM_step_instance 
    | 44 -> NONTERM_step_instance 
    | 45 -> NONTERM_step_instance 
    | 46 -> NONTERM_item_declaration 
    | 47 -> NONTERM_tag_declaration 
    | 48 -> NONTERM_step_declaration 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 18 
let _fsyacc_tagOfErrorTerminal = 16

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | L_ARROW  -> "L_ARROW" 
  | R_ARROW  -> "R_ARROW" 
  | L_PAREN  -> "L_PAREN" 
  | R_PAREN  -> "R_PAREN" 
  | L_ANGLE  -> "L_ANGLE" 
  | R_ANGLE  -> "R_ANGLE" 
  | L_BRACKET  -> "L_BRACKET" 
  | R_BRACKET  -> "R_BRACKET" 
  | SEMI  -> "SEMI" 
  | COLON_COLON  -> "COLON_COLON" 
  | COLON  -> "COLON" 
  | COMMA  -> "COMMA" 
  | EOF  -> "EOF" 
  | ENV  -> "ENV" 
  | TYPE _ -> "TYPE" 
  | NAME _ -> "NAME" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | L_ARROW  -> (null : System.Object) 
  | R_ARROW  -> (null : System.Object) 
  | L_PAREN  -> (null : System.Object) 
  | R_PAREN  -> (null : System.Object) 
  | L_ANGLE  -> (null : System.Object) 
  | R_ANGLE  -> (null : System.Object) 
  | L_BRACKET  -> (null : System.Object) 
  | R_BRACKET  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | COLON_COLON  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | ENV  -> (null : System.Object) 
  | TYPE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 2us; 6us; 2us; 65535us; 0us; 8us; 2us; 8us; 2us; 65535us; 0us; 5us; 2us; 7us; 2us; 65535us; 0us; 13us; 2us; 13us; 2us; 65535us; 0us; 15us; 2us; 15us; 2us; 65535us; 0us; 16us; 2us; 16us; 2us; 65535us; 0us; 17us; 2us; 17us; 2us; 65535us; 20us; 21us; 23us; 24us; 6us; 65535us; 0us; 25us; 2us; 25us; 20us; 35us; 23us; 35us; 29us; 30us; 36us; 38us; 3us; 65535us; 40us; 41us; 62us; 63us; 74us; 76us; 1us; 65535us; 44us; 45us; 2us; 65535us; 44us; 46us; 47us; 48us; 2us; 65535us; 51us; 52us; 54us; 55us; 3us; 65535us; 51us; 57us; 54us; 57us; 58us; 59us; 6us; 65535us; 0us; 31us; 2us; 31us; 20us; 34us; 23us; 34us; 32us; 33us; 36us; 37us; 1us; 65535us; 61us; 62us; 3us; 65535us; 0us; 28us; 2us; 28us; 26us; 27us; 5us; 65535us; 0us; 22us; 2us; 22us; 18us; 19us; 26us; 70us; 71us; 72us; 2us; 65535us; 0us; 10us; 2us; 10us; 2us; 65535us; 0us; 11us; 2us; 11us; 2us; 65535us; 0us; 12us; 2us; 12us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; 14us; 17us; 20us; 23us; 26us; 29us; 36us; 40us; 42us; 45us; 48us; 52us; 59us; 61us; 65us; 71us; 74us; 77us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 3us; 1us; 4us; 5us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 3us; 13us; 14us; 19us; 2us; 13us; 14us; 2us; 13us; 14us; 1us; 14us; 3us; 14us; 22us; 23us; 3us; 15us; 41us; 48us; 1us; 15us; 3us; 15us; 22us; 23us; 2us; 16us; 47us; 1us; 16us; 2us; 16us; 42us; 2us; 17us; 42us; 1us; 17us; 1us; 17us; 2us; 18us; 46us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 21us; 2us; 22us; 23us; 1us; 22us; 1us; 23us; 2us; 24us; 25us; 2us; 24us; 25us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 26us; 2us; 26us; 28us; 1us; 27us; 1us; 28us; 1us; 28us; 4us; 29us; 30us; 31us; 32us; 2us; 29us; 31us; 1us; 31us; 2us; 31us; 34us; 1us; 31us; 1us; 32us; 2us; 32us; 34us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 35us; 2us; 36us; 37us; 2us; 36us; 37us; 1us; 36us; 1us; 36us; 1us; 37us; 2us; 38us; 40us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 41us; 1us; 42us; 1us; 42us; 2us; 43us; 44us; 2us; 43us; 44us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 45us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 40us; 43us; 46us; 48us; 52us; 56us; 58us; 62us; 65us; 67us; 70us; 73us; 75us; 77us; 80us; 82us; 84us; 86us; 88us; 91us; 93us; 95us; 98us; 101us; 103us; 105us; 107us; 109us; 112us; 114us; 116us; 118us; 123us; 126us; 128us; 131us; 133us; 135us; 138us; 140us; 142us; 144us; 146us; 148us; 151us; 154us; 156us; 158us; 160us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 178us; 181us; 183us; 185us; 187us; |]
let _fsyacc_action_rows = 79
let _fsyacc_actionTableElements = [|4us; 32768us; 2us; 73us; 4us; 39us; 6us; 61us; 13us; 78us; 0us; 49152us; 5us; 32768us; 2us; 73us; 4us; 39us; 6us; 61us; 12us; 3us; 13us; 78us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 1us; 32768us; 8us; 9us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 8us; 14us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 2us; 32768us; 1us; 18us; 11us; 32us; 2us; 32768us; 2us; 73us; 13us; 78us; 1us; 16397us; 1us; 20us; 2us; 32768us; 4us; 39us; 6us; 61us; 1us; 16398us; 11us; 36us; 2us; 16425us; 1us; 23us; 8us; 16432us; 2us; 32768us; 4us; 39us; 6us; 61us; 1us; 16399us; 11us; 36us; 1us; 16431us; 9us; 26us; 2us; 32768us; 2us; 73us; 13us; 78us; 1us; 16400us; 11us; 71us; 2us; 32768us; 9us; 29us; 11us; 71us; 1us; 32768us; 4us; 39us; 0us; 16401us; 1us; 16402us; 8us; 16430us; 1us; 32768us; 6us; 61us; 0us; 16403us; 0us; 16404us; 0us; 16405us; 2us; 32768us; 4us; 39us; 6us; 61us; 0us; 16406us; 0us; 16407us; 1us; 32768us; 15us; 40us; 2us; 32768us; 5us; 43us; 10us; 44us; 1us; 32768us; 5us; 42us; 0us; 16408us; 0us; 16409us; 1us; 32768us; 15us; 49us; 1us; 16410us; 11us; 47us; 0us; 16411us; 1us; 32768us; 15us; 49us; 0us; 16412us; 2us; 16414us; 2us; 54us; 15us; 50us; 1us; 16413us; 2us; 51us; 1us; 32768us; 15us; 60us; 2us; 32768us; 3us; 53us; 11us; 58us; 0us; 16415us; 1us; 32768us; 15us; 60us; 2us; 32768us; 3us; 56us; 11us; 58us; 0us; 16416us; 0us; 16417us; 1us; 32768us; 15us; 60us; 0us; 16418us; 0us; 16419us; 2us; 32768us; 14us; 68us; 15us; 66us; 2us; 32768us; 7us; 65us; 10us; 44us; 1us; 32768us; 7us; 64us; 0us; 16420us; 0us; 16421us; 1us; 16424us; 15us; 67us; 0us; 16422us; 1us; 32768us; 15us; 69us; 0us; 16423us; 0us; 16425us; 2us; 32768us; 2us; 73us; 13us; 78us; 0us; 16426us; 1us; 32768us; 15us; 74us; 2us; 32768us; 3us; 75us; 10us; 44us; 0us; 16427us; 1us; 32768us; 3us; 77us; 0us; 16428us; 0us; 16429us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 12us; 13us; 14us; 15us; 16us; 17us; 19us; 20us; 21us; 22us; 23us; 25us; 26us; 27us; 28us; 31us; 34us; 36us; 39us; 41us; 44us; 47us; 49us; 51us; 54us; 56us; 59us; 61us; 62us; 64us; 66us; 67us; 68us; 69us; 72us; 73us; 74us; 76us; 79us; 81us; 82us; 83us; 85us; 87us; 88us; 90us; 91us; 94us; 96us; 98us; 101us; 102us; 104us; 107us; 108us; 109us; 111us; 112us; 113us; 116us; 119us; 121us; 122us; 123us; 125us; 126us; 128us; 129us; 130us; 133us; 134us; 136us; 139us; 140us; 142us; 143us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 1us; 2us; 2us; 2us; 1us; 1us; 1us; 2us; 1us; 1us; 3us; 5us; 3us; 3us; 3us; 1us; 3us; 1us; 1us; 3us; 3us; 4us; 3us; 2us; 1us; 3us; 2us; 1us; 5us; 4us; 1us; 3us; 1us; 4us; 3us; 2us; 2us; 1us; 1us; 3us; 3us; 4us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; 16us; 17us; 17us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 21us; 22us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16387us; 16388us; 16389us; 65535us; 16390us; 16391us; 16392us; 16393us; 65535us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 16403us; 16404us; 16405us; 65535us; 16406us; 16407us; 65535us; 65535us; 65535us; 16408us; 16409us; 65535us; 65535us; 16411us; 65535us; 16412us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 16417us; 65535us; 16418us; 16419us; 65535us; 65535us; 65535us; 16420us; 16421us; 65535us; 16422us; 65535us; 16423us; 16425us; 65535us; 16426us; 65535us; 65535us; 16427us; 65535us; 16428us; 16429us; |]
let _fsyacc_reductions ()  =    [| 
# 230 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : CnCAst.Graph)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 239 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "Parser.fsy"
                      List.rev _1
                   )
# 19 "Parser.fsy"
                 : CnCAst.Graph));
# 250 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'terminated_declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 21 "Parser.fsy"
                     [Declaration _1]
                   )
# 21 "Parser.fsy"
                 : 'statements));
# 261 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'terminated_relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "Parser.fsy"
                     [Relation _1]
                   )
# 22 "Parser.fsy"
                 : 'statements));
# 272 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'terminated_declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "Parser.fsy"
                     (Declaration _2) :: _1
                   )
# 23 "Parser.fsy"
                 : 'statements));
# 284 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'statements)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'terminated_relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "Parser.fsy"
                     (Relation _2) :: _1
                   )
# 24 "Parser.fsy"
                 : 'statements));
# 296 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "Parser.fsy"
                     _1
                   )
# 26 "Parser.fsy"
                 : 'terminated_declaration));
# 307 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "Parser.fsy"
                     ItemDecl _1
                   )
# 28 "Parser.fsy"
                 : 'declaration));
# 318 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "Parser.fsy"
                     TagDecl _1
                   )
# 29 "Parser.fsy"
                 : 'declaration));
# 329 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_declaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                     StepDecl _1
                   )
# 30 "Parser.fsy"
                 : 'declaration));
# 340 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'relation)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                     _1
                   )
# 32 "Parser.fsy"
                 : 'terminated_relation));
# 351 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_execution)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                     StepExecution _1
                   )
# 34 "Parser.fsy"
                 : 'relation));
# 362 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_prescription)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                     StepPrescription _1
                   )
# 35 "Parser.fsy"
                 : 'relation));
# 373 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                     (List.rev(_1), _3, [])
                   )
# 37 "Parser.fsy"
                 : 'step_execution));
# 385 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'output_instance_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                     (List.rev(_1), _3, List.rev(_5))
                   )
# 38 "Parser.fsy"
                 : 'step_execution));
# 398 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'output_instance_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                     ([],_1, List.rev(_3))
                   )
# 39 "Parser.fsy"
                 : 'step_execution));
# 410 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_instance)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                     (_1, List.rev _3)
                   )
# 47 "Parser.fsy"
                 : 'step_prescription));
# 422 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                     (_3, List.rev _1)
                   )
# 48 "Parser.fsy"
                 : 'step_prescription));
# 434 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                     [_1]
                   )
# 50 "Parser.fsy"
                 : 'item_instance_list));
# 445 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                      _3 :: _1
                   )
# 51 "Parser.fsy"
                 : 'item_instance_list));
# 457 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                     [ItemInst _1]
                   )
# 53 "Parser.fsy"
                 : 'output_instance_list));
# 468 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                     [TagInst  _1]
                   )
# 54 "Parser.fsy"
                 : 'output_instance_list));
# 479 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'output_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                     (ItemInst _3) :: _1
                   )
# 55 "Parser.fsy"
                 : 'output_instance_list));
# 491 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'output_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                     (TagInst _3) :: _1
                   )
# 56 "Parser.fsy"
                 : 'output_instance_list));
# 503 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_description)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                      {TagInstance.Name=_2; TagInstance.Tag=_3}  
                   )
# 58 "Parser.fsy"
                 : 'tag_instance));
# 515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                     {TagInstance.Name=_2; TagInstance.Tag=defaultTagDescription} 
                   )
# 59 "Parser.fsy"
                 : 'tag_instance));
# 526 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_component_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                     List.rev _2
                   )
# 61 "Parser.fsy"
                 : 'tag_description));
# 537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_component)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                     [_1]
                   )
# 63 "Parser.fsy"
                 : 'tag_component_list));
# 548 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_component_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_component)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                     _3 :: _1
                   )
# 64 "Parser.fsy"
                 : 'tag_component_list));
# 560 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                      BaseTypeComponent {ComponentType=_1; ComponentName=_2} 
                   )
# 66 "Parser.fsy"
                 : 'tag_component));
# 572 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                      BaseTypeComponent {ComponentType=defaultTagType; ComponentName=_1} 
                   )
# 67 "Parser.fsy"
                 : 'tag_component));
# 583 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'param_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                     FunctionTypeComponent {FunctionName=_2; ReturnType=_1; ParameterList=List.rev _4} 
                   )
# 68 "Parser.fsy"
                 : 'tag_component));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'param_list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                      FunctionTypeComponent {FunctionName=_1; ReturnType=defaultTagType; ParameterList=List.rev _3} 
                   )
# 69 "Parser.fsy"
                 : 'tag_component));
# 608 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'param)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                     [_1]
                   )
# 71 "Parser.fsy"
                 : 'param_list));
# 619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'param_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'param)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                     _3 :: _1
                   )
# 72 "Parser.fsy"
                 : 'param_list));
# 631 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                     _1
                   )
# 74 "Parser.fsy"
                 : 'param));
# 642 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_definition)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_description)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                      {ItemInstance.Name=snd(_2); ItemInstance.Type=fst(_2); ItemInstance.Tag=_3} 
                   )
# 76 "Parser.fsy"
                 : 'item_instance));
# 654 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_definition)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                      {ItemInstance.Name=snd(_2); ItemInstance.Type=fst(_2); ItemInstance.Tag=defaultTagDescription} 
                   )
# 77 "Parser.fsy"
                 : 'item_instance));
# 665 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                     (_1, _2)
                   )
# 79 "Parser.fsy"
                 : 'item_definition));
# 677 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                     (_1, _2)
                   )
# 80 "Parser.fsy"
                 : 'item_definition));
# 689 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                     (defaultTagType, _1)
                   )
# 81 "Parser.fsy"
                 : 'item_definition));
# 700 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                     [_1]
                   )
# 83 "Parser.fsy"
                 : 'step_instance_list));
# 711 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance_list)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                     _3 :: _1
                   )
# 84 "Parser.fsy"
                 : 'step_instance_list));
# 723 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                      UserDefinedStep {UserStepInstance.Name=_2; UserStepInstance.Tag=defaultTagDescription } 
                   )
# 86 "Parser.fsy"
                 : 'step_instance));
# 734 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_description)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                      UserDefinedStep {UserStepInstance.Name=_2; UserStepInstance.Tag=_3 } 
                   )
# 87 "Parser.fsy"
                 : 'step_instance));
# 746 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                     Env
                   )
# 88 "Parser.fsy"
                 : 'step_instance));
# 756 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'item_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                     _1
                   )
# 90 "Parser.fsy"
                 : 'item_declaration));
# 767 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tag_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                     _1
                   )
# 92 "Parser.fsy"
                 : 'tag_declaration));
# 778 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'step_instance)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                     _1
                   )
# 94 "Parser.fsy"
                 : 'step_declaration));
|]
# 790 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 19;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : CnCAst.Graph =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
